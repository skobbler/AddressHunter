<?php
/**
 * AddressHunter
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/BSD-3-Clause
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to contact@addresshunter.net so we can send you a copy immediately.
 *
 * @package   AddressHunter
 * @copyright Copyright (c) 2011 skobbler GmbH (http://www.skobbler.com)
 * @license   http://www.opensource.org/licenses/BSD-3-Clause	 New BSD License
 * @version   $Id$
 */

use Doctrine\ORM\EntityRepository;

/**
 * GameuserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @copyright Copyright (c) 2011 skobbler GmbH (http://www.skobbler.com)
 * @license   http://www.opensource.org/licenses/BSD-3-Clause	 New BSD License
 */
class Application_Model_Addresshunter_GameuserRepository extends EntityRepository
{
	/**
	 * Calculates the winner of the game.
	 * The winner is the player with the most addresses found. In case of equality, the winner is
	 * the player who reached first the winning score (who collected first the last of
	 * their address).
	 *
	 * @param Application_Model_Addresshunter_Game $game
	 */
	public function findGameWinner($game)
	{
		try {
			// retrieving the value of the winning score (max points collected in this game) and the number of players who reached it
			$query = $this->_em->createQuery('SELECT COUNT(gu.id) as winners_no, MAX(gu.points) as max_points FROM Application_Model_Addresshunter_Gameuser gu
											WHERE gu.status=?2 AND gu.game=?1 AND gu.points = (SELECT MAX(gu1.points)
											FROM Application_Model_Addresshunter_Gameuser gu1 WHERE gu1.game=?1 and gu1.status=?2) GROUP BY gu.game');
			$query->setParameter(1, $game);
			$query->setParameter(2, Application_Model_Addresshunter_Gameuser::STATUS_ACTIVE);

			$result1 = $query->getSingleResult();

			// retrieving all players (gameusers) with the winning score (max points)
			$query = $this->_em->createQuery('SELECT gu FROM Application_Model_Addresshunter_Gameuser gu WHERE gu.game=?1 AND gu.points=?2 AND gu.status =?3');
			$query->setParameter(1, $game);
			$query->setParameter(2, $result1['max_points']);
			$query->setParameter(3, Application_Model_Addresshunter_Gameuser::STATUS_ACTIVE);
			$playersWithMaxPoints = $query->execute();

			$gameWinner = '';
			// if more than one player has the winnig score, calculating which one reached it first
			if ($result1['winners_no'] > 1) {
				$timeOfLastAddress = '';
				foreach ($playersWithMaxPoints as $player) {
					// retrieving the date of the last found address for each player
					$query = $this->_em->createQuery('SELECT ga.id, ga.dateFound FROM Application_Model_Addresshunter_Gameaddress ga
													 WHERE ga.game=?1 AND ga.user=?2 ORDER BY ga.dateFound DESC');
					$query->setParameter(1, $game);
					$query->setParameter(2, $player->getUser());
					$result = $query->execute();
					$lastAddressDate = $result[0]['dateFound'];
					if (($timeOfLastAddress == '') || ($timeOfLastAddress > $lastAddressDate)) {
						$timeOfLastAddress = $lastAddressDate;
						$gameWinner = $player;
					}
				}
			} else {
				// if only one player has the winning score: he is the winner
				$gameWinner = $playersWithMaxPoints[0];
			}
		} catch (Exception $e) {
		}
		
		return $gameWinner;
	}
}
