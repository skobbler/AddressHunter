<?php
/**
 * AddressHunter
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://www.opensource.org/licenses/BSD-3-Clause
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to contact@addresshunter.net so we can send you a copy immediately.
 *
 * @package   AddressHunter
 * @copyright Copyright (c) 2011 skobbler GmbH (http://www.skobbler.com)
 * @license   http://www.opensource.org/licenses/BSD-3-Clause	 New BSD License
 * @version   $Id$
 */

use Doctrine\ORM\EntityRepository;

/**
 * GameRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @copyright Copyright (c) 2011 skobbler GmbH (http://www.skobbler.com)
 * @license   http://www.opensource.org/licenses/BSD-3-Clause	 New BSD License
 */
class Application_Model_Addresshunter_GameRepository extends EntityRepository
{
	/**
	 * Retrieves the available games in a given area (bounding box).
	 * A game is considered available if it was not yet started and is not expired (has status 'new').
	 *
	 * @param array $boundingBox Array with keys: xmax, xmin, ymax, ymin
	 * @param integer $limit Number of results to return
	 * @return array of Application_Model_Addresshunter_Game object
	 */
	public function getAvailableGames($boundingBox, $limit)
	{
		$query = $this->_em->createQuery('SELECT g FROM Application_Model_Addresshunter_Game g
										  WHERE g.gameX <= ?1 AND
												g.gameX >= ?2 AND
												g.gameY <= ?3 AND
												g.gameY >= ?4 AND
												g.status = ?5
											'
										);
		$query->setMaxResults($limit);
		$query->setParameter(1, $boundingBox['xmax']);
		$query->setParameter(2, $boundingBox['xmin']);
		$query->setParameter(3, $boundingBox['ymax']);
		$query->setParameter(4, $boundingBox['ymin']);
		$query->setParameter(5, Application_Model_Addresshunter_Game::STATUS_NEW);

		$result = $query->execute();

		return $result;
	}

	/**
	 * Retrieves all active games (with status 'new' or 'playing').
	 *
	 * This method is used by a monitoring tool that checks for game expiration and inconsistencies.
	 *
	 * @return array of Application_Model_Addresshunter_Game object
	 */
	public function getActiveGames()
	{
		// new or playing games are considered active
		$query = $this->_em->createQuery('SELECT g FROM Application_Model_Addresshunter_Game g
										  WHERE g.status = ?1 OR
												g.status = ?2
											'
										);

		$query->setParameter(1, Application_Model_Addresshunter_Game::STATUS_NEW);
		$query->setParameter(2, Application_Model_Addresshunter_Game::STATUS_PLAYING);

		$result = $query->execute();

		return $result;
	}
}
