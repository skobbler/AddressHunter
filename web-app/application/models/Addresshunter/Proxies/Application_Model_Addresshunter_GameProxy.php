<?php

namespace Addresshunter\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class Application_Model_Addresshunter_GameProxy extends \Application_Model_Addresshunter_Game implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getPlayers()
    {
        $this->__load();
        return parent::getPlayers();
    }

    public function getActivePlayers()
    {
        $this->__load();
        return parent::getActivePlayers();
    }

    public function addPlayer($gameuser)
    {
        $this->__load();
        return parent::addPlayer($gameuser);
    }

    public function getPlayer($userOsmId)
    {
        $this->__load();
        return parent::getPlayer($userOsmId);
    }

    public function getAddresses()
    {
        $this->__load();
        return parent::getAddresses();
    }

    public function getActiveAddresses()
    {
        $this->__load();
        return parent::getActiveAddresses();
    }

    public function addAddress($gameaddress)
    {
        $this->__load();
        return parent::addAddress($gameaddress);
    }

    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setDateCreated($dateCreated)
    {
        $this->__load();
        return parent::setDateCreated($dateCreated);
    }

    public function getDateCreated()
    {
        $this->__load();
        return parent::getDateCreated();
    }

    public function setDateStarted($dateStarted)
    {
        $this->__load();
        return parent::setDateStarted($dateStarted);
    }

    public function getDateStarted()
    {
        $this->__load();
        return parent::getDateStarted();
    }

    public function setDateEnded($dateEnded)
    {
        $this->__load();
        return parent::setDateEnded($dateEnded);
    }

    public function getDateEnded()
    {
        $this->__load();
        return parent::getDateEnded();
    }

    public function setGameX($gameX)
    {
        $this->__load();
        return parent::setGameX($gameX);
    }

    public function getGameX()
    {
        $this->__load();
        return parent::getGameX();
    }

    public function setGameY($gameY)
    {
        $this->__load();
        return parent::setGameY($gameY);
    }

    public function getGameY()
    {
        $this->__load();
        return parent::getGameY();
    }

    public function setPlayerAddressNo($playerAddressNo)
    {
        $this->__load();
        return parent::setPlayerAddressNo($playerAddressNo);
    }

    public function getPlayerAddressNo()
    {
        $this->__load();
        return parent::getPlayerAddressNo();
    }

    public function setMaxPlayers($maxPlayers)
    {
        $this->__load();
        return parent::setMaxPlayers($maxPlayers);
    }

    public function getMaxPlayers()
    {
        $this->__load();
        return parent::getMaxPlayers();
    }

    public function setTimeframe($timeframe)
    {
        $this->__load();
        return parent::setTimeframe($timeframe);
    }

    public function getTimeframe()
    {
        $this->__load();
        return parent::getTimeframe();
    }

    public function setStatus($status)
    {
        $this->__load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->__load();
        return parent::getStatus();
    }

    public function setBonus($bonus)
    {
        $this->__load();
        return parent::setBonus($bonus);
    }

    public function getBonus()
    {
        $this->__load();
        return parent::getBonus();
    }

    public function setRadius($radius)
    {
        $this->__load();
        return parent::setRadius($radius);
    }

    public function getRadius()
    {
        $this->__load();
        return parent::getRadius();
    }

    public function setType($type)
    {
        $this->__load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->__load();
        return parent::getType();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setCreatedBy(\Application_Model_Addresshunter_User $createdBy)
    {
        $this->__load();
        return parent::setCreatedBy($createdBy);
    }

    public function getCreatedBy()
    {
        $this->__load();
        return parent::getCreatedBy();
    }

    public function toArray()
    {
        $this->__load();
        return parent::toArray();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'name', 'dateCreated', 'dateStarted', 'dateEnded', 'gameX', 'gameY', 'playerAddressNo', 'maxPlayers', 'timeframe', 'bonus', 'id', 'radius', 'createdBy', 'players', 'addresses', 'status', 'type');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}